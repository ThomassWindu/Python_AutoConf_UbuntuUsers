#!/usr/bin/python3.9
# -*-coding:utf-8 -*

# test execution bash via python
import re
from subprocess import call

#-------------- Variables ------------------------------------------

#ces variables doivent correspondre aux variables des script bash
#c'est la liste des occurences qui seront remplacées par le string.replace(ancienne occurence, nouvelle occurence)
listeOccuARemplUser = ['nomNewUser','mpdNewUser','ncNewUser','nbNewUser','telProNewUser','telPersoNewUser','autreNewUser']
listeOccuARemplPostes = ['nomUserSSH','hoteSSH','mdpUserSSH']
boolReboot = False


#--------------Fin Variables ---------------------------------------


#--------------Lecture des fichiers et mise en variables--------------------------------

#on lit le fichier puis on lancera la chaine avec call apres modification des valeurs
with open('../Bash/main/mainAddOuSuppUsers', 'r') as fichier:
    stringScriptARemplir = fichier.read()

#on lit le fichier puis on lancera la chaine avec call apres modification des valeurs
with open('../Bash/main/mainCheckUserInSSH', 'r') as fichier:
    stringScriptCheck = fichier.read()
    
#on lit le fichier puis on lancera la chaine avec call apres modification des valeurs
with open('../Bash/main/mainRebootAll', 'r') as fichier:
    stringScriptReboot = fichier.read()
    
#recupération des valeurs utilisateurs
with open('../listeUtilisateurs', 'r') as fichier:
	#on lit et on sépare chaque lignes dans une liste
    listeUtilisateurs = fichier.read().splitlines()
    #on enleve le premier element (ce sont les titres de colonnes)
    del listeUtilisateurs[0]


#recupération des valeurs des postes distants
with open('../listePostesDistants', 'r') as fichier:
	#on lit et on sépare chaque lignes dans une liste
    listePostesDistants = fichier.read().splitlines()
    #on enleve le premier element (ce sont les titres de colonnes)
    del listePostesDistants[0]
    
#-------------- Fin Lecture des fichiers --------------------------------


#-------------- Fonction -----------------------------------------------  
  
def remplirScriptBash(lstParam,lstVal,stScript):
	"""Cette fonction utilise la fonction replace de string.
	Premier parametre lstParam est une liste de string des occurences qui seront remplacé
	Deuxieme parametre lstVal est la nouvelle valeur
	Le troisieme parametre est la chaine où seront effectué les remplacements
	
	lstVal[0] remplacera lstParam[0] dans stScript puis [1] ...[2] etc
	
	"""
	i=0
	#on parcours la liste de valeur car sa taille peut varier
	for stVal in lstVal:
		#exemple :  remplace nomParam="" par monParam="Ma Valeur"
		stScript = stScript.replace(lstParam[i] + '=""',lstParam[i] + '="' + stVal + '"')
		
		#si par erreur il y a plus de valeurs que de parametres
		if len(lstParam) == (i + 1):
			break
		i += 1	
	return stScript
	
#-------------------------------------------------------------------------- 

def choixAction(stScript):
	"""Cette fonction propose à l'utilisateur de faire un choix entre ajouter ou supprimer.
	Une fois le choix fait, elle va modifier le nom d'une fonction dans le script Bash
	Le script bash fera donc appel soit à delUserBySSH ou à addUserBySSH
	
	Nous avons ajouté un autre choix, celui de reboot toutes les machines
	
	"""
	print("Voulez vous ajouter ou supprimer les utilisateurs de la liste vers les postes distants de la liste?")
	stringChoixAction = input("""Tapez:
a pour ajouter
s pour supprimer
r pour redémarrer tout les postes distants
ctrl+c pour quitter
""").lower()
	while stringChoixAction != "a" and stringChoixAction != "s" and stringChoixAction != "r":
		stringChoixAction = input("""Tapez:
a pour ajouter
s pour supprimer
r pour redémarrer tout les postes distants
ctrl+c pour quitter
""").lower()
	if stringChoixAction == "s":
		maCommande ="delUserBySSH"
		stScript = stScript.replace("XXX1Commande",maCommande)
	else:
		if stringChoixAction == "a":
			maCommande ="addUserBySSH"
			stScript = stScript.replace("XXX1Commande",maCommande)
		else:
			if stringChoixAction == "r":
				stScript = "redemarer"
			
	return stScript
	
#-------------------------------------------------------------------------- 

def rempliEtExecuteBash(stLstUsers,stLstComp,script):
	for stringLigne in stLstComp:
		# on sépare les valeurs avec le ; 
		listeInfoPoste = stringLigne.split(";")
		stringScriptPreRempli = remplirScriptBash(listeOccuARemplPostes,listeInfoPoste,script)
		#on parcours maintenant la liste des utilisateurs
		#on exécutera donc nPoste fois nUtilisateurs le script
		for stringLigne in stLstUsers:
			# on sépare les valeurs avec le ; 
			listeInfoUser = stringLigne.split(";")
			#on met en minuscule le nom d'utilisateur pour aider a correspondre à l'expression reguliere
			listeInfoUser[0] = listeInfoUser[0].lower()
			#on test directement si le nom de l'utilisateur correspon a l'expression NAME_REGEX="^[a-z][-a-z0-9_]*\$"
			if re.match("^[a-z][-a-z0-9_]*\$",listeInfoUser[0]) != "none":
				stringScriptFinal = remplirScriptBash(listeOccuARemplUser,listeInfoUser,stringScriptPreRempli).strip()
				#on test un print fin de vérifier la version final avant de tenter l'execution
				#print(stringScriptFinal)
				rc = call(stringScriptFinal, shell=True,executable="/bin/bash")
			else:
				print('Erreur de syntaxe du nom: ' + listeInfoUser[0])
				print("""Le nom ne correspond pas à NAME_REGEX="^[a-z][-a-z0-9_]*\$" que l'on trouve dans /ect/adduser.conf""")
	
#-------------------------------------------------------------------------- 

def excuteScriptSurChaquePoste(script):
	"""Se connecte en ssh a partir d'une liste de postes distant puis execute le script
	
	"""
	for stringLigne in listePostesDistants:
		# on sépare les valeurs avec le ; 
		listeInfoPoste = stringLigne.split(";")
		scriptFinal = remplirScriptBash(listeOccuARemplPostes,listeInfoPoste,script)
		rc = call(scriptFinal, shell=True,executable="/bin/bash")
		
#-------------------------------------------------------------------------- 

#-------------Fin Fonctions ---------------------------------------------
#========================  Partie Main   ============================================

#Fonction qui demande a l'utilisateur d'ajouter ou supprimer puis retourne le script modifier selon le choix.
stringScriptARemplir = choixAction(stringScriptARemplir)
#pour chaque utilisateur dans cette liste, nous allons ajouter leurs valeurs dans le script afin de l'executer
#Cette fonction executera le script xPostes fois xUtilisateurs
if stringScriptARemplir == "redemarer":
	excuteScriptSurChaquePoste(stringScriptReboot)	
else:
	rempliEtExecuteBash (listeUtilisateurs,listePostesDistants,stringScriptARemplir)
	#Se connect en ssh sur tout les postes de la liste pour afficher la liste d'utilisateurs.
	excuteScriptSurChaquePoste(stringScriptCheck)	
#
